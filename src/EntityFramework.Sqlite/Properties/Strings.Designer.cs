// <auto-generated />
namespace Microsoft.Data.Entity.Sqlite
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
	using JetBrains.Annotations;

    public static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Sqlite.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Cannot add column to table '{tableName}' with non-constant default '{defaultValue}'.
        /// </summary>
        public static string AddColumnWithDefaultExprNotSupported([CanBeNull] object tableName, [CanBeNull] object defaultValue)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AddColumnWithDefaultExprNotSupported", "tableName", "defaultValue"), tableName, defaultValue);
        }

        /// <summary>
        /// SQLite cannot support this migration operation.
        /// </summary>
        public static string InvalidMigrationOperation
        {
            get { return GetString("InvalidMigrationOperation"); }
        }

        /// <summary>
        /// Generating scripts for migration is not supported by SQLite.
        /// </summary>
        public static string MigrationScriptGenerationNotSupported
        {
            get { return GetString("MigrationScriptGenerationNotSupported"); }
        }

        /// <summary>
        /// Operations involving multiple databases in SQLite is not currently supported.
        /// </summary>
        public static string MultipleDatabasesNotSupported
        {
            get { return GetString("MultipleDatabasesNotSupported"); }
        }

        /// <summary>
        /// SQLite does not support sequences.
        /// </summary>
        public static string SequencesNotSupported
        {
            get { return GetString("SequencesNotSupported"); }
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
